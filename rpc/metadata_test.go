package rpc

import (
	"bytes"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestMetadata_Encode(t *testing.T) {
	meta := MetadataFromStringPairs(
		"Hello", "World",
		"AnotherKey", "AnotherValue",
	)
	encoded := meta.Encode()
	expected := []byte{
		0x00, 0x02, 0x04, 0x05, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x04, 0x0A,
		0x41, 0x6E, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x4B, 0x65, 0x79, 0x05,
		0x05, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x05, 0x0C, 0x41, 0x6E, 0x6F,
		0x74, 0x68, 0x65, 0x72, 0x56, 0x61, 0x6C, 0x75, 0x65,
	}
	assert.Equal(t, expected, encoded)
}

func TestMetadata_Decode(t *testing.T) {
	data := []byte{
		0x00, 0x02, 0x04, 0x05, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x04, 0x0A,
		0x41, 0x6E, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x4B, 0x65, 0x79, 0x05,
		0x05, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x05, 0x0C, 0x41, 0x6E, 0x6F,
		0x74, 0x68, 0x65, 0x72, 0x56, 0x61, 0x6C, 0x75, 0x65,
	}
	meta, err := MetadataFromReader(bytes.NewReader(data))
	require.NoError(t, err)
	assert.Equal(t, MetadataFromStringPairs(
		"Hello", "World",
		"AnotherKey", "AnotherValue",
	), meta)
}
